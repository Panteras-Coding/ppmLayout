{"version":3,"sources":["Assets/Coding[ING].svg","Assets/Dashboard.svg","Assets/monitor.svg","Assets/calendario.svg","Assets/Mensaje.svg","Assets/edit.svg","Assets/door-key.svg","Assets/logout.svg","Assets/information.svg","Assets/upanterasblanco.svg","Assets/Buscar.svg","Assets/menu.svg","Assets/basura.svg","Assets/plus.svg","Assets/clip-de-papel.svg","Assets/circle-check.svg","Assets/FlechaIzq.svg","Assets/flechaDer.svg","Assets/logoUP.svg","Assets/businessman.svg","Components/Chat/ChatContainer.jsx","config/dates.js","context/CalendarContext.js","Components/Main/Views/Calendar.jsx","Components/Register/Register.jsx","serviceWorker.js","index.js","Assets/usuario-de-perfil.svg","Assets/lock.svg","Assets/engranaje.svg"],"names":["module","exports","ChatContainer","APP_LOCALE","process","JC_CALENDAR_APP_LOCALE","Object","freeze","createContext","config","locale","long","Info","weekdaysFormat","short","narrow","weekDays","Array","fill","map","_","weekDayIndex","DAYS_IN_A_WEEK","slice","getWeekdaysDescriptions","Component","Boolean","window","location","hostname","match","React","require","render","document","getElementById"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,yC,0DCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,wC,oBCA3CD,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,yC,oBCA3CD,EAAOC,QAAU,IAA0B,6C,oBCA3CD,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,2C,oBCA3CD,EAAOC,QAAU,IAA0B,0C,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,yC,2HCc5BC,I,mBCZTC,EAAU,UAAGC,6HAAYC,8BAAf,QADO,QAaAC,OAAOC,OAAO,CAFb,EACF,ICVKC,2BDyBpB,WACL,IAAMC,EAAS,CAAEC,OAAQP,GACnBQ,EAAOC,OAAKC,eAAe,OAAQJ,GACnCK,EAAQF,OAAKC,eAAe,QAASJ,GACrCM,EAASH,OAAKC,eAAe,SAAUJ,GAEvCO,EAAWC,MA9BW,GA+BzBC,KAAK,MACLC,KAAI,SAACC,EAAGC,GACP,MAAO,CACLV,KAAMA,EAAKU,GACXP,MAAOA,EAAMO,GACbN,OAAQA,EAAOM,OAMf,CACJL,EAASM,IADX,mBAEKN,EAASO,MAAM,EAAGD,KE3CRE,GDOjB,I,uEENuBC,Y,OCMHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbN,IAAIC,EAAQC,EAAQ,GACLA,EAAQ,IACdC,OAAO,yCAAsBC,SAASC,eAAe,U,mBCP9DnC,EAAOC,QAAU,IAA0B,+C,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,wC","file":"static/js/main.36d4dce4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Coding[ING].d4c7368c.svg\";","module.exports = __webpack_public_path__ + \"static/media/Dashboard.19512b0f.svg\";","module.exports = __webpack_public_path__ + \"static/media/monitor.22acbbfe.svg\";","module.exports = __webpack_public_path__ + \"static/media/calendario.e550852a.svg\";","module.exports = __webpack_public_path__ + \"static/media/Mensaje.85b6c4bc.svg\";","module.exports = __webpack_public_path__ + \"static/media/edit.3e4d12ee.svg\";","module.exports = __webpack_public_path__ + \"static/media/door-key.dd4595c7.svg\";","module.exports = __webpack_public_path__ + \"static/media/logout.27ff8fe7.svg\";","module.exports = __webpack_public_path__ + \"static/media/information.a2c95ade.svg\";","module.exports = __webpack_public_path__ + \"static/media/upanterasblanco.e78e0ef8.svg\";","module.exports = __webpack_public_path__ + \"static/media/Buscar.c3f3a3af.svg\";","module.exports = __webpack_public_path__ + \"static/media/menu.7144191d.svg\";","module.exports = __webpack_public_path__ + \"static/media/basura.eb21708d.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.86d30977.svg\";","module.exports = __webpack_public_path__ + \"static/media/clip-de-papel.8c993c37.svg\";","module.exports = __webpack_public_path__ + \"static/media/circle-check.0b563b43.svg\";","module.exports = __webpack_public_path__ + \"static/media/FlechaIzq.fe034baf.svg\";","module.exports = __webpack_public_path__ + \"static/media/flechaDer.c9525297.svg\";","module.exports = __webpack_public_path__ + \"static/media/logoUP.bd2377f0.svg\";","module.exports = __webpack_public_path__ + \"static/media/businessman.05b79e30.svg\";","import React from \"react\";\r\n\r\nfunction ChatContainer(){\r\n    return <div id=\"chat-container\">\r\n        <div id=\"new-message-container\">\r\n            <div id=\"chat-form\">\r\n                <input type=\"text\" placeholder=\"Enviar mensaje\"/>\r\n                <img src={require('../../Assets/clip-de-papel.svg')} alt=\"fileImg\" />\r\n                <img src={require('../../Assets/circle-check.svg')} alt=\"chkImg\" />\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ChatContainer;","import { DateTime, Info, Interval } from 'luxon';\r\nconst DEFAULT_LOCALE = 'es-MX';\r\nconst APP_LOCALE = process.env.JC_CALENDAR_APP_LOCALE ?? DEFAULT_LOCALE;\r\n\r\nexport const DAYS_IN_A_WEEK = 7;\r\nexport const MONTH_FORMAT = 'yyyy-MM';\r\nexport const DATE_FORMAT = 'yyyy-MM-dd';\r\nexport const TIME_FORMAT = 'hh:mm';\r\n\r\nexport const DATE_REGEX = /([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/;\r\nexport const TIME_REGEX = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;\r\n\r\nconst SATURDAY_NUMBER = 7;\r\nconst SUNDAY_NUMBER = 1;\r\nconst weekendNumbers = Object.freeze([SATURDAY_NUMBER, SUNDAY_NUMBER]);\r\n\r\n/**\r\n * Convert the ISO week number to local week number.\r\n * That will make the week start from Sunday.\r\n * @param {number} isoWeekday ISO week number: from `1 - Monday` to `7 - Sunday`.\r\n */\r\nexport function toLocalWeekdayNumber(isoWeekday) {\r\n  return (isoWeekday % DAYS_IN_A_WEEK) + 1;\r\n}\r\n\r\n/**\r\n * Returns long, short, and narrow weekdays descriptions for the current `APP_LOCALE`.\r\n */\r\nexport function getWeekdaysDescriptions() {\r\n  const config = { locale: APP_LOCALE };\r\n  const long = Info.weekdaysFormat('long', config);\r\n  const short = Info.weekdaysFormat('short', config);\r\n  const narrow = Info.weekdaysFormat('narrow', config);\r\n\r\n  const weekDays = Array(DAYS_IN_A_WEEK)\r\n    .fill(null)\r\n    .map((_, weekDayIndex) => {\r\n      return {\r\n        long: long[weekDayIndex],\r\n        short: short[weekDayIndex],\r\n        narrow: narrow[weekDayIndex],\r\n      };\r\n    });\r\n\r\n  // luxon only return ISO weekdays order,\r\n  // and we want Sunday to be the first day.\r\n  return [\r\n    weekDays[DAYS_IN_A_WEEK - 1],\r\n    ...weekDays.slice(0, DAYS_IN_A_WEEK - 1),\r\n  ];\r\n}\r\n\r\n/**\r\n * Returns an array for the passed date's month with trailing dates for next/previous months.\r\n * The array represents a calendar that starts on Sunday and ends on Saturday.\r\n * @param {string} dateString The date (format: `yyyy-MM`) to generate the grid from.\r\n */\r\nexport function getMonthlyCalendarGrid(dateString) {\r\n  const month = DateTime.fromFormat(dateString, MONTH_FORMAT);\r\n\r\n  // Get the interval for the provided month\r\n  const monthInterval = Interval.fromDateTimes(\r\n    month.startOf('month'),\r\n    month.endOf('month')\r\n  );\r\n\r\n  // Get offsets for trailing months\r\n  const firstWeekOffset = toLocalWeekdayNumber(monthInterval.start.weekday) - 1;\r\n  const lastWeekOffset =\r\n    DAYS_IN_A_WEEK - toLocalWeekdayNumber(monthInterval.end.weekday);\r\n\r\n  // Get calendar with trailing intervals\r\n  const calendarInterval = Interval.fromDateTimes(\r\n    monthInterval.start.minus({\r\n      days: firstWeekOffset > 0 ? firstWeekOffset : 0,\r\n    }),\r\n    monthInterval.end.plus({ days: lastWeekOffset })\r\n  );\r\n\r\n  // Map the interval to an ordered dates array that represents a calendars month.\r\n  const totalDays = calendarInterval.count('days');\r\n  const start = calendarInterval.start;\r\n  return Array(totalDays)\r\n    .fill(null)\r\n    .map((_, startOffset) => {\r\n      const date = start.plus({ days: startOffset });\r\n      return {\r\n        key: date.toFormat(DATE_FORMAT),\r\n        text: date.toLocaleString({ locale: APP_LOCALE, day: 'numeric' }),\r\n        trailing: !month.hasSame(date, 'month'),\r\n        isWeekend: weekendNumbers.includes(toLocalWeekdayNumber(date.weekday)),\r\n      };\r\n    });\r\n}\r\n\r\n/**\r\n * Returns a localized formatted month and year string.\r\n * @param {string} monthString The month to get the key from.\r\n */\r\nexport function getDisplayMonthAndYear(monthString) {\r\n  return DateTime.fromFormat(monthString, MONTH_FORMAT).toLocaleString({\r\n    locale: APP_LOCALE,\r\n    year: 'numeric',\r\n    month: 'long',\r\n  });\r\n}\r\n\r\n/**\r\n * Returns a date string representation of the provided DateTime.\r\n * @param {DateTime} dateTime\r\n */\r\nexport function dateTimeToDateString(dateTime) {\r\n  return dateTime.toFormat(DATE_FORMAT, { locale: APP_LOCALE });\r\n}\r\n\r\n/**\r\n * Returns a time string representation of the provided DateTime.\r\n * @param {DateTime} date\r\n */\r\nexport function dateTimeToTimeString(dateTime) {\r\n  return dateTime.toLocaleString(DateTime.TIME_24_SIMPLE);\r\n}\r\n\r\n/**\r\n * Returns an object with keys `date`, and `time` from milliseconds of a date.\r\n * @param {number} dateMillis\r\n */\r\nexport function millisToDateTimeStrings(dateMillis) {\r\n  const dateTime = DateTime.fromMillis(dateMillis);\r\n\r\n  return {\r\n    date: dateTimeToDateString(dateTime),\r\n    time: dateTimeToTimeString(dateTime),\r\n  };\r\n}\r\n\r\n/**\r\n * Returns total milliseconds from a date and time.\r\n * @param {string} dateString\r\n * @param {string} timeString\r\n */\r\nexport function dateTimeStringsToMillis(dateString, timeString) {\r\n  return DateTime.fromFormat(\r\n    `${dateString} ${timeString}`,\r\n    `${DATE_FORMAT} ${TIME_FORMAT}`,\r\n    { locale: APP_LOCALE }\r\n  ).toMillis();\r\n}\r\n\r\nexport function getDisplayTimeFromMillis(dateMillis) {\r\n  return DateTime.fromMillis(dateMillis).toLocaleString({\r\n    ...DateTime.TIME_SIMPLE,\r\n    locale: APP_LOCALE,\r\n  });\r\n}","import React, { createContext, useState, useEffect } from 'react';\r\nimport { getMonthlyCalendarGrid  } from '../config/dates';\r\n\r\nexport const DateContext = createContext();\r\n\r\nfunction formatMonth (month) {\r\n    month = month + 1;\r\n    if(month < 10){\r\n        month = '0' + month;\r\n    }\r\nreturn month\r\n}\r\nconst DateProvider = (props) => {\r\n    const date = new Date();\r\n    var currentMonth = date.getMonth();\r\n    var currentYear = date.getFullYear();\r\n    const [month, saveMonth] = useState(currentMonth);\r\n    const [year, saveYear] = useState(currentYear);\r\n    const [showMonth, setShowMonth] = useState(true);\r\n\r\n    const [changeMade, saveChange] = useState(false);\r\n    \r\n    const [dates, setDates] = useState(getMonthlyCalendarGrid(year+\"-\"+formatMonth(month)))\r\n    useEffect(() => {\r\n    \r\n        if (changeMade) {\r\n            const getSearchMonth = () => {\r\n                setDates(getMonthlyCalendarGrid(year+\"-\"+formatMonth(month)))\r\n                }\r\n            getSearchMonth();\r\n        }\r\n\r\n    }, [month]);\r\n\r\n    return (\r\n        <DateContext.Provider\r\n            value={{\r\n                month,\r\n                year,\r\n                dates,\r\n                showMonth,\r\n                setShowMonth,\r\n                saveMonth,\r\n                saveChange,\r\n                saveYear\r\n            }}\r\n        >\r\n            {props.children}\r\n        </DateContext.Provider>\r\n    );\r\n}\r\n\r\nexport default DateProvider;","import React from \"react\";\r\nimport { getWeekdaysDescriptions } from \"../../../config/dates\";\r\nimport CalendarGrid from \"./ViewComponents/CalendarCmp/CalendarGrid\";\r\nimport CalendarHeader from \"./ViewComponents/CalendarCmp/CalendarHeader\";\r\n\r\nconst weekDays = getWeekdaysDescriptions();\r\nconst Calendar = () => {\r\n  \r\n    return (\r\n        <div className={\"calendar\"}>\r\n            <CalendarHeader weekDays={weekDays} />\r\n            <CalendarGrid /> \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Calendar;","import { render } from '@testing-library/react';\r\nimport React from 'react';\r\nimport { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from 'axios';\r\n\r\nclass Register extends Component { \r\n constructor(props) {\r\n    super(props)\r\n      this.state = {\r\n        name:'',\r\n        lastName:'',\r\n        id:'',\r\n        hash:'',\r\n        carrera:'',\r\n        semestre:'',\r\n        grupo:''\r\n      }\r\n  }\r\n  changeHandler = (e) => {\r\n    this.setState({[e.target.name]: e.target.value})\r\n  }\r\n\r\n  submitHandler = e => {\r\n    e.preventDefault()\r\n    console.log(this.state)\r\n    axios.post('https://panteras-project-management.wn.r.appspot.com/users/register', this.state)\r\n    .then(response => {\r\n      console.log(response)\r\n    })\r\n    .catch(error => {\r\n      console.log(error)\r\n    })\r\n  }\r\n  \r\n  render() {\r\n    const { name, lastName, id, hash, carrera, semestre, grupo } = this.state\r\n    return (\r\n        <div className=\"mainContainerRegister\">\r\n          <div className=\"containerReg\" id=\"containerReg\">\r\n            <div className=\"form-containerReg sign-in-containerReg\">\r\n              <div className=\"overlayReg\">\r\n                <div className=\"overlay-panelReg overlay-leftReg\">\r\n                  <h1>Registro</h1>\r\n                  <form className=\"inputReg\" onSubmit={this.submitHandler}>\r\n                    <div className=\"prueba\">\r\n                      <div className=\"idIconReg\">\r\n                        <input type=\"text\" name=\"id\" placeholder=\"ID\" value={id} onChange={this.changeHandler}/>\r\n                        <img alt={\"lockIcon\"} src={require(\"../../Assets/logoUP.svg\")}/>\r\n                      </div>\r\n                      <div className=\"idIconReg\">\r\n                        <input type=\"text\" name=\"name\" placeholder=\"Nombre\" value={name} onChange={this.changeHandler}/>\r\n                        <img alt={\"lockIcon\"} src={require(\"../../Assets/usuario-de-perfil.svg\")}/>\r\n                      </div>\r\n                      <div className=\"idIconReg\">\r\n                      <input type=\"text\" name=\"lastName\" placeholder=\"Apellido\" value={lastName} onChange={this.changeHandler}/>\r\n                      <img alt={\"lockIcon\"} src={require(\"../../Assets/usuario-de-perfil.svg\")}/>\r\n                    </div>\r\n                      <div className=\"idIconReg\">\r\n                        <input type=\"text\" name=\"semestre\" placeholder=\"Semestre\" value={semestre} onChange={this.changeHandler}/>\r\n                        <img alt={\"lockIcon\"} src={require(\"../../Assets/usuario-de-perfil.svg\")}/>\r\n                      </div>\r\n                      <div className=\"idIconReg\">\r\n                        <input type=\"password\" name=\"hash\" placeholder=\"Contraseña\" value={hash} onChange={this.changeHandler}/>\r\n                        <img alt={\"lockIcon\"} src={require(\"../../Assets/lock.svg\")}/>\r\n                      </div>\r\n                      <div className=\"idIconReg\">\r\n                        <input type=\"password\" name=\"hash\" placeholder=\"Confirmar contraseña\" value={hash} onChange={this.changeHandler}/>\r\n                        <img alt={\"lockIcon\"} src={require(\"../../Assets/lock.svg\")}/>\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                        <select name=\"carrera\" value={carrera} onChange={this.changeHandler}>\r\n                            <option>Ingeniería a la que perteneces:</option>\r\n                            <option value=\"Animació y Videojuegos\">Animación y Videojuegos</option>\r\n                            <option value=\"Innovación y Diseño\">Innovación y Diseño</option>\r\n                            <option value=\"Industrial\">Industrial</option>\r\n                            <option value=\"Mecánica\">Mecánica</option>\r\n                            <option value=\"Mecatrónica\">Mecatrónica</option>\r\n                            <option value=\"TI\">TI</option>\r\n                        </select>\r\n                    </div>\r\n                    {/* <div className=\"idIconReg\">\r\n                      <input type=\"password\" placeholder=\"Confirmar contraseña\"/>\r\n                      <img alt={\"lockIcon\"} src={require(\"../../Assets/lock.svg\")}/>\r\n                    </div> */}\r\n                    <div class=\"sidebar-box\">\r\n                      <select class=\"styled-select\" name=\"grupo\" value={grupo} onChange={this.changeHandler}>\r\n                        <option>Grupo al que te vas a unir:</option>\r\n                        <option value=\"Above\">Above</option>\r\n                        <option value=\"Baja\">Baja</option>\r\n                        <option value=\"Coding\">Coding</option>\r\n                        <option value=\"Data Science\">Data Science</option>\r\n                        <option value=\"Dynamics\">Dynamics</option>\r\n                        <option value=\"E-racing\">E-racing</option>\r\n                        <option value=\"Green Squad\">Green Squad</option>\r\n                        <option value=\"Robotics\">Robotics</option>\r\n                        <option value=\"Vortex\">Vortex</option>\r\n                      </select>\r\n                    </div>\r\n                    <p>Ya tienes cuenta <Link to=\"/\">inicia sesión</Link></p>\r\n                    <button type=\"submit\">Regístrate</button>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n    \r\n            <div className=\"overlay-containerReg\">\r\n              <h1>\r\n                Bienvenido a Panteras PM<sup>[ING]</sup>\r\n              </h1>\r\n              <p>Si tienes problemas para acceder a tu cuenta, contáctanos</p>\r\n              <img\r\n                alt={\"Logo Panteras\"}\r\n                src={require(\"../../Assets/Coding[ING].svg\")}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Register;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","/*import React from 'react';\r\nimport ReactDOM from 'react-dom';*/\r\nimport App from './App';\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker';\r\nvar React = require(\"react\");\r\nvar ReactDOM = require(\"react-dom\");\r\nReactDOM.render(<h1>Hello world</h1>, document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n/*serviceWorker.unregister();*/\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/usuario-de-perfil.885126fc.svg\";","module.exports = __webpack_public_path__ + \"static/media/lock.42f3c9c9.svg\";","module.exports = __webpack_public_path__ + \"static/media/engranaje.dc70bff2.svg\";"],"sourceRoot":""}